"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const ramda_1 = require("ramda");
const HttpClient_1 = require("../HttpClient");
const dependsOnApp = (appAtMajor) => (a) => {
    const [name, major] = appAtMajor.split('@');
    const version = a._resolvedDependencies[name];
    if (!version) {
        return false;
    }
    const [depMajor] = version.split('.');
    return major === depMajor;
};
const joinIds = ramda_1.join('');
class Settings extends HttpClient_1.AppClient {
    constructor(context, options) {
        super('vtex.settings-server', context, options);
    }
    getFilteredDependencies(appAtMajor, dependencies) {
        const depends = dependsOnApp(appAtMajor);
        return ramda_1.filter(depends, dependencies);
    }
    getDependenciesHash(dependencies) {
        const dependingApps = ramda_1.pluck('id', dependencies);
        return crypto_1.createHash('md5').update(joinIds(dependingApps)).digest('hex');
    }
    async getSettings(dependencies, appAtMajor, params) {
        const filtered = this.getFilteredDependencies(appAtMajor, dependencies);
        const depsHash = this.getDependenciesHash(filtered);
        return this.http.get(`/settings/${appAtMajor}/${depsHash}`, {
            inflightKey: HttpClient_1.inflightUrlWithQuery,
            metric: 'settings-get',
            params,
        });
    }
}
exports.Settings = Settings;
